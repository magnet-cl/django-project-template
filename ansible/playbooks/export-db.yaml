- name: init
  hosts: all
  gather_facts: no
  any_errors_fatal: yes
  tasks:
    - name: import check Ansible version task
      import_tasks: utils/assert-ansible-version.yaml

    - name: check that ansible_limit is defined
      assert:
        that: ansible_limit is defined
        fail_msg: Please explicitly limit the hosts you want to target with --limit
        quiet: yes
      # This prevents "ERROR! 'ansible_limit' is undefined" later.

    - name: check that this playbook is run against two hosts, or one together with local_dump
      assert:
        that: >
          (ansible_play_hosts | length == 2 and local_dump is not defined)
            or (ansible_play_hosts | length == 1 and local_dump is defined)
        fail_msg: >
          You must limit this playbook to two hosts and don't set local_dump,
          or limit to one host and set local_dump.
        quiet: yes
      run_once: yes

    - name: configure for remote dump
      block:
        - name: check that ansible_limit contains exactly one comma
          assert:
            that: ansible_limit is match('^[^,]+,[^,]+$')
            fail_msg: Please use the --limit option with one comma.
            quiet: yes

        - name: set source and destination host name
          set_fact:
            src_host: "{{ ansible_limit | regex_replace('(.+),.+', '\\1') }}"
            dest_host: "{{ ansible_limit | regex_replace('.+,(.+)', '\\1') }}"
      when: ansible_play_hosts | length == 2

    - name: configure for local dump
      set_fact:
        src_host: __local__
        dest_host: "{{ ansible_limit }}"
        dump_name: "{{ local_dump }}"
      when: ansible_play_hosts | length == 1

- name: confirm
  hosts: all
  run_once: yes
  any_errors_fatal: yes
  gather_facts: no
  vars_prompt:
    - name: confirmation
      #     prompt: Are you sure you want to replace the DB of  "{{ dest_host }}" ...
      # Oh crap. "'dest_host' is undefined"
      # yamllint disable rule:line-length
      prompt: >-
        Are you sure you want to replace the DB of
        "{{ ansible_limit if (ansible_play_hosts | length == 1) else (ansible_limit | regex_replace('.+,(.+)', '\1')) }}"
        ({{ lookup('env', 'PWD') | dirname | basename }}) [y/N]?
      # yamllint enable rule:line-length
      private: no   # Show input (this is made to input passwords)
  tasks:
    - name: check confirmation
      assert:
        that: confirmation | lower == 'y'
        fail_msg: Confirmation failed.
        quiet: yes
  tags: molecule-notest

- name: download DB
  hosts: all    # Can't use a variable here, so put everything in a block and limit with "when"
  tasks:
    - name: download DB on source host only
      block:
        - name: get source DB configuration
          include_role:
            name: get-db-config

        - name: backup
          include_role:
            name: db
            tasks_from: backup

        - name: download
          include_role:
            name: db
            tasks_from: download

        - name: convert dump_name to path
          set_fact:
            dump_name: "{{ inventory_hostname }}/{{ dump_name }}"
      when: inventory_hostname == src_host

- name: copy and import the dump
  hosts: all
  tasks:
    - name: copy and import the dump on destination host only
      block:

        # Upload dump
        - name: set dump_name
          set_fact:
            # If the dump was downloaded, dump_name variable is set in src_host only
            dump_name: "{{ hostvars[src_host].dump_name }}"
          when: dump_name is not defined
        - name: create dump upload tempfile
          tempfile:
            prefix: db_dump.
          register: temp_dump
        - name: upload dump
          copy:
            src: "{{ dump_name }}"
            dest: "{{ temp_dump.path }}"
            force: yes    # overwrite empty temp_dump

        - name: get destination DB configuration
          include_role:
            name: get-db-config

        # Backup
        - name: check if DB exists
          include_role:
            name: db
            tasks_from: check-existence
        - name: create a backup before restoring
          include_role:
            name: db
            tasks_from: backup
          when: db_exists.stdout == '1'
          # Note: it's "local_dump" instead of "dump_name" to avoid overriding the variable inside this role.

        - name: restore dump
          include_role:
            name: db
            tasks_from: restore
          vars:
            - dump_path: "{{ temp_dump.path }}"
            - is_local_dump_file: "{{ src_host == '__local__' }}"
            - src_delegate: "{{ src_host }}"

      always:
        - name: remove dump tempfile
          file:
            path: "{{ temp_dump.path }}"
            state: absent
          # Note: the dump could be kept in ~/db_dumps/ instead of deleting it,
          # though it should have src_host in the file name to avoid confusion.

      when: inventory_hostname == dest_host or src_host == '__local__'
        # "or" in case (inventory_hostname != dest_host == ansible_limit) because it contains comma
