- name: clone/pull repository
  git:
    repo: "{{ server_git_url }}"
    version: "{{ branch }}"
    dest: "{{ server_root_dir }}"

    # If the repository is too big, you could uncomment the next line:
    # depth: 1    # Download last commit only.
    # This gives a shallow repository. To obtain a full one, run:
    #     git remote set-branches origin "*" && git fetch --unshallow

  # Remotes sometimes fail once, so:
  register: git_result
  retries: 1
  delay: 3
  until: git_result is succeeded

- name: backup DB
  block:
    - name: get DB configuration
      include_role:
        name: get-db-config

    # Skip dump only if this task says DB doesn't exist and didn't fail,
    # to avoid going on without backup in case DB exists but dump failed.
    - name: check if DB exists
      include_role:
        name: db
        tasks_from: check-existence

    - name: non-existent DB message
      debug:
        msg: Database {{ db_conf.NAME }} doesn't exist, skipping backup.
      when: db_exists.stdout != '1'

    - name: perform backup with role
      include_role:
        name: db
        tasks_from: backup
      when: db_exists.stdout == '1'

  rescue:
    - name: include task_name var from another role   # (failed_get_db_config_task_name)
      include_vars: ../get-db-config/vars/main.yaml

    - name: print the consequences of the failure
      fail:
        msg: |
          {{ git_action }} succeeded and changed but {{ failure }}

          {{ hint if 'update' not in ansible_run_tags else '' }}
          Warning: running this again won't trigger a backup, because the repository is already up-to-date.
          To backup manually, run:
            ansible-playbook -i inventory.yaml -l {{ inventory_hostname }} playbooks/backup-db.yaml
      vars:
        git_action: Git {{ 'clone' if (git_result.before is none) else 'pull' }}

        failure: >-
          {{
            'failed to get DB config. Refusing to continue without a backup.'
            if ansible_failed_task.name == failed_get_db_config_task_name
            else 'DB backup failed.'
          }}

        # yamllint disable rule:line-length
        hint: |
          Hint: if you are in the middle of a failed deploy, and this failed because the project is not set up yet, delete:
            {{ server_root_dir }}
        # yamllint enable rule:line-length

  when:                               # Skip backup on:
    - git_result.changed              #   - no changes, or
    - git_result.before is not none   #   - first clone.
