- name: install Pipenv and create virtualenv
  block:
    - name: install Pipenv with pip as root
      pip:
        name: pipenv
        executable: pip3
      become: yes
      register: pipenv_install
      failed_when:
        - pipenv_install is failed
        - "'Unable to find any of pip3 to use.' not in (pipenv_install.msg | default(''))"
      # In CentOS it works the first time, but then fails in later plays.
      # "which pip3" --> "/usr/local/bin/pip3"
      # "sudo which pip3" --> "which: no pip3 in (/sbin:/bin:/usr/sbin:/usr/bin)"

    - name: sudo pip3 not found message
      debug:
        # Print debug message because previous task shows as "ok" if it failed
        msg: pip3 not found with sudo, retrying without sudo...
      when:
        - "'Unable to find any of pip3 to use.' in (pipenv_install.msg | default(''))"

    - name: retry Pipenv install without sudo
      pip:
        name: pipenv
        executable: pip3
      when:
        - "'Unable to find any of pip3 to use.' in (pipenv_install.msg | default(''))"

    - name: check if Pipenv is available in path
      shell: command -v pipenv  # noqa 305    "command" is a shell builtin, not an executable utility
      register: pipenv_existence
      changed_when: False
      failed_when: False  # To fail with a custom message, in the next task

    - name: fail if Pipenv is not available in path
      fail:
        msg: Pipenv is installed but not available in path. Please try reinstalling manually.
      when: pipenv_existence.rc > 0

    # Pipenv doesn't play well with Ansible...

    - name: get Pipenv virtualenv
      command: pipenv --venv
      args:
        chdir: "{{ server_root_dir }}"
      register: venv
      changed_when: false
      failed_when:
        - venv.rc > 0
        - no_venv_message not in venv.stderr
      tags: update

    - name: create virtualenv with Pipenv
      command: pipenv --python 3.8
      args:
        chdir: "{{ server_root_dir }}"
      when: no_venv_message in venv.stderr

  when: ansible_distribution != 'MacOSX'

# Could avoid running twice with "when",
# but would have to register to another variable,
# and later choose between the two registered...
- name: get Pipenv virtualenv again
  include_role:
    name: get-venv

- name: install Pipenv requirements
  block:
    - name: create requirements.txt tempfile
      tempfile:
        prefix: requirements.
        suffix: .txt
      register: requirements
      changed_when: false

    - name: write requirements.txt with Pipenv
      shell: pipenv lock -r > {{ requirements.path | quote }}
      args:
        chdir: "{{ server_root_dir }}"
      changed_when: false

    - name: install requirements with pip
      pip:
        chdir: "{{ server_root_dir }}"
        requirements: "{{ requirements.path }}"
        virtualenv: "{{ venv.stdout }}"
  always:
    - name: remove requirements.txt tempfile
      file:
        path: "{{ requirements.path }}"
        state: absent
      changed_when: false
  tags: update
